
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002640  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800276c  0800276c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002774  08002774  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800277c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002788  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002788  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b72  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001210  00000000  00000000  00025ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  00026db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000620  00000000  00000000  00027450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012895  00000000  00000000  00027a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f73  00000000  00000000  0003a305  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078a9e  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b8d16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016b8  00000000  00000000  000b8d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026e8 	.word	0x080026e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080026e8 	.word	0x080026e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 f978 	bl	8000784 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f806 	bl	80004a4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f8bc 	bl	8000614 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800049c:	f000 f86e 	bl	800057c <MX_USART1_UART_Init>

  while (1) { }
 80004a0:	e7fe      	b.n	80004a0 <main+0x14>
	...

080004a4 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b09f      	sub	sp, #124	; 0x7c
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	2440      	movs	r4, #64	; 0x40
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2338      	movs	r3, #56	; 0x38
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f002 f90f 	bl	80026d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ba:	232c      	movs	r3, #44	; 0x2c
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	0018      	movs	r0, r3
 80004c0:	2314      	movs	r3, #20
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f002 f907 	bl	80026d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	0018      	movs	r0, r3
 80004ce:	2328      	movs	r3, #40	; 0x28
 80004d0:	001a      	movs	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f002 f900 	bl	80026d8 <memset>

  /** Configure the main internal regulator output voltage */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d8:	4b26      	ldr	r3, [pc, #152]	; (8000574 <SystemClock_Config+0xd0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a26      	ldr	r2, [pc, #152]	; (8000578 <SystemClock_Config+0xd4>)
 80004de:	401a      	ands	r2, r3
 80004e0:	4b24      	ldr	r3, [pc, #144]	; (8000574 <SystemClock_Config+0xd0>)
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	0109      	lsls	r1, r1, #4
 80004e6:	430a      	orrs	r2, r1
 80004e8:	601a      	str	r2, [r3, #0]

  /**
   * Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004ea:	0021      	movs	r1, r4
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2210      	movs	r2, #16
 80004f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2201      	movs	r2, #1
 80004f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	22a0      	movs	r2, #160	; 0xa0
 8000502:	0212      	lsls	r2, r2, #8
 8000504:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800050c:	187b      	adds	r3, r7, r1
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fbda 	bl	8000cc8 <HAL_RCC_OscConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x78>
    Error_Handler();
 8000518:	f000 f892 	bl	8000640 <Error_Handler>
  }

  /**
   * Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 800051c:	212c      	movs	r1, #44	; 0x2c
 800051e:	187b      	adds	r3, r7, r1
 8000520:	220f      	movs	r2, #15
 8000522:	601a      	str	r2, [r3, #0]
		  RCC_CLOCKTYPE_HCLK |
		  RCC_CLOCKTYPE_SYSCLK |
		  RCC_CLOCKTYPE_PCLK1 |
		  RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2100      	movs	r1, #0
 8000540:	0018      	movs	r0, r3
 8000542:	f000 ff97 	bl	8001474 <HAL_RCC_ClockConfig>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0xaa>
    Error_Handler();
 800054a:	f000 f879 	bl	8000640 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	0018      	movs	r0, r3
 800055e:	f001 f9a9 	bl	80018b4 <HAL_RCCEx_PeriphCLKConfig>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0xc6>
    Error_Handler();
 8000566:	f000 f86b 	bl	8000640 <Error_Handler>
  }
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b01f      	add	sp, #124	; 0x7c
 8000570:	bd90      	pop	{r4, r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40007000 	.word	0x40007000
 8000578:	ffffe7ff 	.word	0xffffe7ff

0800057c <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b0c3      	sub	sp, #268	; 0x10c
 8000580:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <MX_USART1_UART_Init+0x90>)
 8000586:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 800058a:	2296      	movs	r2, #150	; 0x96
 800058c:	0192      	lsls	r2, r2, #6
 800058e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 faea 	bl	8001b9c <HAL_UART_Init>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <MX_USART1_UART_Init+0x54>
    Error_Handler();
 80005cc:	f000 f838 	bl	8000640 <Error_Handler>
  }

  while(1) {
	  uint8_t buffer[256] = {0};
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_USART1_UART_Init+0x94>)
 80005d2:	2284      	movs	r2, #132	; 0x84
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	4694      	mov	ip, r2
 80005d8:	44bc      	add	ip, r7
 80005da:	4463      	add	r3, ip
 80005dc:	0018      	movs	r0, r3
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f002 f877 	bl	80026d8 <memset>
	  HAL_UART_Receive(&huart1, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80005ea:	2301      	movs	r3, #1
 80005ec:	425c      	negs	r4, r3
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	005a      	lsls	r2, r3, #1
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_USART1_UART_Init+0x8c>)
 80005f6:	0023      	movs	r3, r4
 80005f8:	f001 fb24 	bl	8001c44 <HAL_UART_Receive>
	  int x = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	1d7a      	adds	r2, r7, #5
 8000600:	32ff      	adds	r2, #255	; 0xff
 8000602:	6013      	str	r3, [r2, #0]
  while(1) {
 8000604:	e7e4      	b.n	80005d0 <MX_USART1_UART_Init+0x54>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	20000028 	.word	0x20000028
 800060c:	40013800 	.word	0x40013800
 8000610:	fffffefc 	.word	0xfffffefc

08000614 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_GPIO_Init+0x28>)
 800061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_GPIO_Init+0x28>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <MX_GPIO_Init+0x28>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40021000 	.word	0x40021000

08000640 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) { }
 8000646:	e7fe      	b.n	8000646 <Error_Handler+0x6>

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <HAL_MspInit+0x24>)
 800064e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_MspInit+0x24>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <HAL_MspInit+0x24>)
 800065a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_MspInit+0x24>)
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	0549      	lsls	r1, r1, #21
 8000662:	430a      	orrs	r2, r1
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	230c      	movs	r3, #12
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	0018      	movs	r0, r3
 800067e:	2314      	movs	r3, #20
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f002 f828 	bl	80026d8 <memset>
  if(huart->Instance==USART1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <HAL_UART_MspInit+0x80>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d12a      	bne.n	80006e8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_UART_MspInit+0x84>)
 8000694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <HAL_UART_MspInit+0x84>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	01c9      	lsls	r1, r1, #7
 800069c:	430a      	orrs	r2, r1
 800069e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_UART_MspInit+0x84>)
 80006a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_UART_MspInit+0x84>)
 80006a6:	2101      	movs	r1, #1
 80006a8:	430a      	orrs	r2, r1
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_UART_MspInit+0x84>)
 80006ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b0:	2201      	movs	r2, #1
 80006b2:	4013      	ands	r3, r2
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006b8:	210c      	movs	r1, #12
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	22c0      	movs	r2, #192	; 0xc0
 80006be:	00d2      	lsls	r2, r2, #3
 80006c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2202      	movs	r2, #2
 80006c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2203      	movs	r2, #3
 80006d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2204      	movs	r2, #4
 80006d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	187a      	adds	r2, r7, r1
 80006dc:	23a0      	movs	r3, #160	; 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 f972 	bl	80009cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b008      	add	sp, #32
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40013800 	.word	0x40013800
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 f886 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000732:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490e      	ldr	r1, [pc, #56]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0b      	ldr	r4, [pc, #44]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800075a:	f7ff ffe4 	bl	8000726 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075e:	f001 ff97 	bl	8002690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000762:	f7ff fe93 	bl	800048c <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
   ldr   r0, =_estack
 8000768:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000774:	0800277c 	.word	0x0800277c
  ldr r2, =_sbss
 8000778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800077c:	200000b0 	.word	0x200000b0

08000780 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_COMP_IRQHandler>
	...

08000784 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_Init+0x3c>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_Init+0x3c>)
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	430a      	orrs	r2, r1
 800079a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800079c:	2000      	movs	r0, #0
 800079e:	f000 f811 	bl	80007c4 <HAL_InitTick>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d003      	beq.n	80007ae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
 80007ac:	e001      	b.n	80007b2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007ae:	f7ff ff4b 	bl	8000648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_InitTick+0x5c>)
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_InitTick+0x60>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0019      	movs	r1, r3
 80007d6:	23fa      	movs	r3, #250	; 0xfa
 80007d8:	0098      	lsls	r0, r3, #2
 80007da:	f7ff fc95 	bl	8000108 <__udivsi3>
 80007de:	0003      	movs	r3, r0
 80007e0:	0019      	movs	r1, r3
 80007e2:	0020      	movs	r0, r4
 80007e4:	f7ff fc90 	bl	8000108 <__udivsi3>
 80007e8:	0003      	movs	r3, r0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 f8e1 	bl	80009b2 <HAL_SYSTICK_Config>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e00f      	b.n	8000818 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d80b      	bhi.n	8000816 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	2301      	movs	r3, #1
 8000802:	425b      	negs	r3, r3
 8000804:	2200      	movs	r2, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f000 f8be 	bl	8000988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_InitTick+0x64>)
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b003      	add	sp, #12
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x1c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	001a      	movs	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	18d2      	adds	r2, r2, r3
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_IncTick+0x20>)
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000008 	.word	0x20000008
 800084c:	200000ac 	.word	0x200000ac

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <HAL_GetTick+0x10>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	200000ac 	.word	0x200000ac

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b7f      	cmp	r3, #127	; 0x7f
 8000878:	d828      	bhi.n	80008cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087a:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <__NVIC_SetPriority+0xd4>)
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b25b      	sxtb	r3, r3
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	33c0      	adds	r3, #192	; 0xc0
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	589b      	ldr	r3, [r3, r2]
 800088a:	1dfa      	adds	r2, r7, #7
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	0011      	movs	r1, r2
 8000890:	2203      	movs	r2, #3
 8000892:	400a      	ands	r2, r1
 8000894:	00d2      	lsls	r2, r2, #3
 8000896:	21ff      	movs	r1, #255	; 0xff
 8000898:	4091      	lsls	r1, r2
 800089a:	000a      	movs	r2, r1
 800089c:	43d2      	mvns	r2, r2
 800089e:	401a      	ands	r2, r3
 80008a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	401a      	ands	r2, r3
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	0018      	movs	r0, r3
 80008b0:	2303      	movs	r3, #3
 80008b2:	4003      	ands	r3, r0
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b8:	481f      	ldr	r0, [pc, #124]	; (8000938 <__NVIC_SetPriority+0xd4>)
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	089b      	lsrs	r3, r3, #2
 80008c2:	430a      	orrs	r2, r1
 80008c4:	33c0      	adds	r3, #192	; 0xc0
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ca:	e031      	b.n	8000930 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <__NVIC_SetPriority+0xd8>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0019      	movs	r1, r3
 80008d4:	230f      	movs	r3, #15
 80008d6:	400b      	ands	r3, r1
 80008d8:	3b08      	subs	r3, #8
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	3306      	adds	r3, #6
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	18d3      	adds	r3, r2, r3
 80008e2:	3304      	adds	r3, #4
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1dfa      	adds	r2, r7, #7
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	0011      	movs	r1, r2
 80008ec:	2203      	movs	r2, #3
 80008ee:	400a      	ands	r2, r1
 80008f0:	00d2      	lsls	r2, r2, #3
 80008f2:	21ff      	movs	r1, #255	; 0xff
 80008f4:	4091      	lsls	r1, r2
 80008f6:	000a      	movs	r2, r1
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	401a      	ands	r2, r3
 80008fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	22ff      	movs	r2, #255	; 0xff
 8000904:	401a      	ands	r2, r3
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	0018      	movs	r0, r3
 800090c:	2303      	movs	r3, #3
 800090e:	4003      	ands	r3, r0
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <__NVIC_SetPriority+0xd8>)
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	001c      	movs	r4, r3
 800091c:	230f      	movs	r3, #15
 800091e:	4023      	ands	r3, r4
 8000920:	3b08      	subs	r3, #8
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	430a      	orrs	r2, r1
 8000926:	3306      	adds	r3, #6
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	18c3      	adds	r3, r0, r3
 800092c:	3304      	adds	r3, #4
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b003      	add	sp, #12
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <SysTick_Config+0x40>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d901      	bls.n	8000956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000952:	2301      	movs	r3, #1
 8000954:	e010      	b.n	8000978 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <SysTick_Config+0x44>)
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	3a01      	subs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095e:	2301      	movs	r3, #1
 8000960:	425b      	negs	r3, r3
 8000962:	2103      	movs	r1, #3
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ff7d 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SysTick_Config+0x44>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SysTick_Config+0x44>)
 8000972:	2207      	movs	r2, #7
 8000974:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000976:	2300      	movs	r3, #0
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	00ffffff 	.word	0x00ffffff
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	210f      	movs	r1, #15
 8000994:	187b      	adds	r3, r7, r1
 8000996:	1c02      	adds	r2, r0, #0
 8000998:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	187b      	adds	r3, r7, r1
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ff5d 	bl	8000864 <__NVIC_SetPriority>
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b004      	add	sp, #16
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff ffbf 	bl	8000940 <SysTick_Config>
 80009c2:	0003      	movs	r3, r0
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80009e2:	e155      	b.n	8000c90 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	4091      	lsls	r1, r2
 80009ee:	000a      	movs	r2, r1
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d100      	bne.n	80009fc <HAL_GPIO_Init+0x30>
 80009fa:	e146      	b.n	8000c8a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d00b      	beq.n	8000a1c <HAL_GPIO_Init+0x50>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d007      	beq.n	8000a1c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a10:	2b11      	cmp	r3, #17
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b12      	cmp	r3, #18
 8000a1a:	d130      	bne.n	8000a7e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	2203      	movs	r2, #3
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	43da      	mvns	r2, r3
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	0013      	movs	r3, r2
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a52:	2201      	movs	r2, #1
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	091b      	lsrs	r3, r3, #4
 8000a68:	2201      	movs	r2, #1
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2203      	movs	r2, #3
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0xf2>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b12      	cmp	r3, #18
 8000abc:	d123      	bne.n	8000b06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	58d3      	ldr	r3, [r2, r3]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2207      	movs	r2, #7
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	2107      	movs	r1, #7
 8000aea:	400b      	ands	r3, r1
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	08da      	lsrs	r2, r3, #3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3208      	adds	r2, #8
 8000b00:	0092      	lsls	r2, r2, #2
 8000b02:	6939      	ldr	r1, [r7, #16]
 8000b04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2203      	movs	r2, #3
 8000b24:	401a      	ands	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	055b      	lsls	r3, r3, #21
 8000b42:	4013      	ands	r3, r2
 8000b44:	d100      	bne.n	8000b48 <HAL_GPIO_Init+0x17c>
 8000b46:	e0a0      	b.n	8000c8a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	4b57      	ldr	r3, [pc, #348]	; (8000ca8 <HAL_GPIO_Init+0x2dc>)
 8000b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b4c:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <HAL_GPIO_Init+0x2dc>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	430a      	orrs	r2, r1
 8000b52:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b54:	4a55      	ldr	r2, [pc, #340]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	589b      	ldr	r3, [r3, r2]
 8000b60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	2203      	movs	r2, #3
 8000b66:	4013      	ands	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	0013      	movs	r3, r2
 8000b70:	43da      	mvns	r2, r3
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	23a0      	movs	r3, #160	; 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d01f      	beq.n	8000bc2 <HAL_GPIO_Init+0x1f6>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a4a      	ldr	r2, [pc, #296]	; (8000cb0 <HAL_GPIO_Init+0x2e4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d019      	beq.n	8000bbe <HAL_GPIO_Init+0x1f2>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a49      	ldr	r2, [pc, #292]	; (8000cb4 <HAL_GPIO_Init+0x2e8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d013      	beq.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a48      	ldr	r2, [pc, #288]	; (8000cb8 <HAL_GPIO_Init+0x2ec>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d00d      	beq.n	8000bb6 <HAL_GPIO_Init+0x1ea>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a47      	ldr	r2, [pc, #284]	; (8000cbc <HAL_GPIO_Init+0x2f0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d007      	beq.n	8000bb2 <HAL_GPIO_Init+0x1e6>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a46      	ldr	r2, [pc, #280]	; (8000cc0 <HAL_GPIO_Init+0x2f4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_GPIO_Init+0x1e2>
 8000baa:	2305      	movs	r3, #5
 8000bac:	e00a      	b.n	8000bc4 <HAL_GPIO_Init+0x1f8>
 8000bae:	2306      	movs	r3, #6
 8000bb0:	e008      	b.n	8000bc4 <HAL_GPIO_Init+0x1f8>
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x1f8>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e004      	b.n	8000bc4 <HAL_GPIO_Init+0x1f8>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <HAL_GPIO_Init+0x1f8>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x1f8>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	400a      	ands	r2, r1
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bd4:	4935      	ldr	r1, [pc, #212]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be2:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	025b      	lsls	r3, r3, #9
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c06:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43da      	mvns	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	029b      	lsls	r3, r3, #10
 8000c24:	4013      	ands	r3, r2
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	035b      	lsls	r3, r3, #13
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	039b      	lsls	r3, r3, #14
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	40da      	lsrs	r2, r3
 8000c98:	1e13      	subs	r3, r2, #0
 8000c9a:	d000      	beq.n	8000c9e <HAL_GPIO_Init+0x2d2>
 8000c9c:	e6a2      	b.n	80009e4 <HAL_GPIO_Init+0x18>
  }
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b006      	add	sp, #24
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	50000400 	.word	0x50000400
 8000cb4:	50000800 	.word	0x50000800
 8000cb8:	50000c00 	.word	0x50000c00
 8000cbc:	50001000 	.word	0x50001000
 8000cc0:	50001c00 	.word	0x50001c00
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f000 fbc2 	bl	8001460 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cdc:	4bca      	ldr	r3, [pc, #808]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	220c      	movs	r2, #12
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ce6:	4bc8      	ldr	r3, [pc, #800]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	025b      	lsls	r3, r3, #9
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d100      	bne.n	8000cfe <HAL_RCC_OscConfig+0x36>
 8000cfc:	e07e      	b.n	8000dfc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d007      	beq.n	8000d14 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	2b0c      	cmp	r3, #12
 8000d08:	d112      	bne.n	8000d30 <HAL_RCC_OscConfig+0x68>
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	025b      	lsls	r3, r3, #9
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d10d      	bne.n	8000d30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d14:	4bbc      	ldr	r3, [pc, #752]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5a>
 8000d20:	e06b      	b.n	8000dfa <HAL_RCC_OscConfig+0x132>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d167      	bne.n	8000dfa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f000 fb98 	bl	8001460 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	025b      	lsls	r3, r3, #9
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d107      	bne.n	8000d4c <HAL_RCC_OscConfig+0x84>
 8000d3c:	4bb2      	ldr	r3, [pc, #712]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4bb1      	ldr	r3, [pc, #708]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e027      	b.n	8000d9c <HAL_RCC_OscConfig+0xd4>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	02db      	lsls	r3, r3, #11
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d10e      	bne.n	8000d76 <HAL_RCC_OscConfig+0xae>
 8000d58:	4bab      	ldr	r3, [pc, #684]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4baa      	ldr	r3, [pc, #680]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	02c9      	lsls	r1, r1, #11
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	4ba8      	ldr	r3, [pc, #672]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4ba7      	ldr	r3, [pc, #668]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	0249      	lsls	r1, r1, #9
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e012      	b.n	8000d9c <HAL_RCC_OscConfig+0xd4>
 8000d76:	4ba4      	ldr	r3, [pc, #656]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4ba3      	ldr	r3, [pc, #652]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d7c:	49a3      	ldr	r1, [pc, #652]	; (800100c <HAL_RCC_OscConfig+0x344>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	4ba1      	ldr	r3, [pc, #644]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	025b      	lsls	r3, r3, #9
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4b9d      	ldr	r3, [pc, #628]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b9c      	ldr	r3, [pc, #624]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000d96:	499e      	ldr	r1, [pc, #632]	; (8001010 <HAL_RCC_OscConfig+0x348>)
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d015      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fd54 	bl	8000850 <HAL_GetTick>
 8000da8:	0003      	movs	r3, r0
 8000daa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dac:	e009      	b.n	8000dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dae:	f7ff fd4f 	bl	8000850 <HAL_GetTick>
 8000db2:	0002      	movs	r2, r0
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b64      	cmp	r3, #100	; 0x64
 8000dba:	d902      	bls.n	8000dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f000 fb4f 	bl	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dc2:	4b91      	ldr	r3, [pc, #580]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	029b      	lsls	r3, r3, #10
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d0ef      	beq.n	8000dae <HAL_RCC_OscConfig+0xe6>
 8000dce:	e015      	b.n	8000dfc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fd3e 	bl	8000850 <HAL_GetTick>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dda:	f7ff fd39 	bl	8000850 <HAL_GetTick>
 8000dde:	0002      	movs	r2, r0
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b64      	cmp	r3, #100	; 0x64
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e339      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dec:	4b86      	ldr	r3, [pc, #536]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	029b      	lsls	r3, r3, #10
 8000df4:	4013      	ands	r3, r2
 8000df6:	d1f0      	bne.n	8000dda <HAL_RCC_OscConfig+0x112>
 8000df8:	e000      	b.n	8000dfc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2202      	movs	r2, #2
 8000e02:	4013      	ands	r3, r2
 8000e04:	d100      	bne.n	8000e08 <HAL_RCC_OscConfig+0x140>
 8000e06:	e09a      	b.n	8000f3e <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	2220      	movs	r2, #32
 8000e12:	4013      	ands	r3, r2
 8000e14:	d009      	beq.n	8000e2a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000e16:	4b7c      	ldr	r3, [pc, #496]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b7b      	ldr	r3, [pc, #492]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	2220      	movs	r2, #32
 8000e26:	4393      	bics	r3, r2
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	2b0c      	cmp	r3, #12
 8000e34:	d13f      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x1ee>
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d13c      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000e3c:	4b72      	ldr	r3, [pc, #456]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2204      	movs	r2, #4
 8000e42:	4013      	ands	r3, r2
 8000e44:	d004      	beq.n	8000e50 <HAL_RCC_OscConfig+0x188>
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e307      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e50:	4b6d      	ldr	r3, [pc, #436]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4a6f      	ldr	r2, [pc, #444]	; (8001014 <HAL_RCC_OscConfig+0x34c>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	021a      	lsls	r2, r3, #8
 8000e60:	4b69      	ldr	r3, [pc, #420]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e62:	430a      	orrs	r2, r1
 8000e64:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e66:	4b68      	ldr	r3, [pc, #416]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2209      	movs	r2, #9
 8000e6c:	4393      	bics	r3, r2
 8000e6e:	0019      	movs	r1, r3
 8000e70:	4b65      	ldr	r3, [pc, #404]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e78:	f000 fc44 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 8000e7c:	0001      	movs	r1, r0
 8000e7e:	4b62      	ldr	r3, [pc, #392]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	220f      	movs	r2, #15
 8000e86:	4013      	ands	r3, r2
 8000e88:	4a63      	ldr	r2, [pc, #396]	; (8001018 <HAL_RCC_OscConfig+0x350>)
 8000e8a:	5cd3      	ldrb	r3, [r2, r3]
 8000e8c:	000a      	movs	r2, r1
 8000e8e:	40da      	lsrs	r2, r3
 8000e90:	4b62      	ldr	r3, [pc, #392]	; (800101c <HAL_RCC_OscConfig+0x354>)
 8000e92:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000e94:	4b62      	ldr	r3, [pc, #392]	; (8001020 <HAL_RCC_OscConfig+0x358>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2513      	movs	r5, #19
 8000e9a:	197c      	adds	r4, r7, r5
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff fc91 	bl	80007c4 <HAL_InitTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000ea6:	197b      	adds	r3, r7, r5
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d047      	beq.n	8000f3e <HAL_RCC_OscConfig+0x276>
      {
        return status;
 8000eae:	2313      	movs	r3, #19
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	e2d4      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d027      	beq.n	8000f0c <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ebc:	4b52      	ldr	r3, [pc, #328]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2209      	movs	r2, #9
 8000ec2:	4393      	bics	r3, r2
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	4b50      	ldr	r3, [pc, #320]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fcbf 	bl	8000850 <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fcba 	bl	8000850 <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e2ba      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2204      	movs	r2, #4
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d0f1      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b44      	ldr	r3, [pc, #272]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_RCC_OscConfig+0x34c>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	0019      	movs	r1, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	021a      	lsls	r2, r3, #8
 8000f04:	4b40      	ldr	r3, [pc, #256]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	e018      	b.n	8000f3e <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	438a      	bics	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff fc9a 	bl	8000850 <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f22:	f7ff fc95 	bl	8000850 <HAL_GetTick>
 8000f26:	0002      	movs	r2, r0
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e295      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f34:	4b34      	ldr	r3, [pc, #208]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2204      	movs	r2, #4
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d1f1      	bne.n	8000f22 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2210      	movs	r2, #16
 8000f44:	4013      	ands	r3, r2
 8000f46:	d100      	bne.n	8000f4a <HAL_RCC_OscConfig+0x282>
 8000f48:	e0a3      	b.n	8001092 <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d141      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_OscConfig+0x2a0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e27b      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a2d      	ldr	r2, [pc, #180]	; (8001024 <HAL_RCC_OscConfig+0x35c>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	0019      	movs	r1, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	0a19      	lsrs	r1, r3, #8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	061a      	lsls	r2, r3, #24
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	0b5b      	lsrs	r3, r3, #13
 8000f96:	3301      	adds	r3, #1
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	0212      	lsls	r2, r2, #8
 8000f9c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	400b      	ands	r3, r1
 8000fa8:	491b      	ldr	r1, [pc, #108]	; (8001018 <HAL_RCC_OscConfig+0x350>)
 8000faa:	5ccb      	ldrb	r3, [r1, r3]
 8000fac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_RCC_OscConfig+0x354>)
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_RCC_OscConfig+0x358>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2513      	movs	r5, #19
 8000fb8:	197c      	adds	r4, r7, r5
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff fc02 	bl	80007c4 <HAL_InitTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000fc4:	197b      	adds	r3, r7, r5
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d062      	beq.n	8001092 <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 8000fcc:	2313      	movs	r3, #19
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	e245      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d040      	beq.n	800105e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_RCC_OscConfig+0x340>)
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	0049      	lsls	r1, r1, #1
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fc31 	bl	8000850 <HAL_GetTick>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000ff2:	e019      	b.n	8001028 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fc2c 	bl	8000850 <HAL_GetTick>
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d912      	bls.n	8001028 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e22c      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	40021000 	.word	0x40021000
 800100c:	fffeffff 	.word	0xfffeffff
 8001010:	fffbffff 	.word	0xfffbffff
 8001014:	ffffe0ff 	.word	0xffffe0ff
 8001018:	08002700 	.word	0x08002700
 800101c:	20000000 	.word	0x20000000
 8001020:	20000004 	.word	0x20000004
 8001024:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001028:	4bc6      	ldr	r3, [pc, #792]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4013      	ands	r3, r2
 8001032:	d0df      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001034:	4bc3      	ldr	r3, [pc, #780]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4ac3      	ldr	r2, [pc, #780]	; (8001348 <HAL_RCC_OscConfig+0x680>)
 800103a:	4013      	ands	r3, r2
 800103c:	0019      	movs	r1, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001042:	4bc0      	ldr	r3, [pc, #768]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001044:	430a      	orrs	r2, r1
 8001046:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001048:	4bbe      	ldr	r3, [pc, #760]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	0a19      	lsrs	r1, r3, #8
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	061a      	lsls	r2, r3, #24
 8001056:	4bbb      	ldr	r3, [pc, #748]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001058:	430a      	orrs	r2, r1
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	e019      	b.n	8001092 <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800105e:	4bb9      	ldr	r3, [pc, #740]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4bb8      	ldr	r3, [pc, #736]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001064:	49b9      	ldr	r1, [pc, #740]	; (800134c <HAL_RCC_OscConfig+0x684>)
 8001066:	400a      	ands	r2, r1
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fbf1 	bl	8000850 <HAL_GetTick>
 800106e:	0003      	movs	r3, r0
 8001070:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001074:	f7ff fbec 	bl	8000850 <HAL_GetTick>
 8001078:	0002      	movs	r2, r0
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e1ec      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001086:	4baf      	ldr	r3, [pc, #700]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4013      	ands	r3, r2
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2208      	movs	r2, #8
 8001098:	4013      	ands	r3, r2
 800109a:	d036      	beq.n	800110a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d019      	beq.n	80010d8 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a4:	4ba7      	ldr	r3, [pc, #668]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010a8:	4ba6      	ldr	r3, [pc, #664]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	430a      	orrs	r2, r1
 80010ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b0:	f7ff fbce 	bl	8000850 <HAL_GetTick>
 80010b4:	0003      	movs	r3, r0
 80010b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ba:	f7ff fbc9 	bl	8000850 <HAL_GetTick>
 80010be:	0002      	movs	r2, r0
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e1c9      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010cc:	4b9d      	ldr	r3, [pc, #628]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d0:	2202      	movs	r2, #2
 80010d2:	4013      	ands	r3, r2
 80010d4:	d0f1      	beq.n	80010ba <HAL_RCC_OscConfig+0x3f2>
 80010d6:	e018      	b.n	800110a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d8:	4b9a      	ldr	r3, [pc, #616]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010dc:	4b99      	ldr	r3, [pc, #612]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80010de:	2101      	movs	r1, #1
 80010e0:	438a      	bics	r2, r1
 80010e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fbb4 	bl	8000850 <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ee:	f7ff fbaf 	bl	8000850 <HAL_GetTick>
 80010f2:	0002      	movs	r2, r0
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e1af      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001100:	4b90      	ldr	r3, [pc, #576]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001104:	2202      	movs	r2, #2
 8001106:	4013      	ands	r3, r2
 8001108:	d1f1      	bne.n	80010ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2204      	movs	r2, #4
 8001110:	4013      	ands	r3, r2
 8001112:	d100      	bne.n	8001116 <HAL_RCC_OscConfig+0x44e>
 8001114:	e0af      	b.n	8001276 <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001116:	2323      	movs	r3, #35	; 0x23
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b89      	ldr	r3, [pc, #548]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	055b      	lsls	r3, r3, #21
 8001126:	4013      	ands	r3, r2
 8001128:	d10a      	bne.n	8001140 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b86      	ldr	r3, [pc, #536]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800112c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800112e:	4b85      	ldr	r3, [pc, #532]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0549      	lsls	r1, r1, #21
 8001134:	430a      	orrs	r2, r1
 8001136:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001138:	2323      	movs	r3, #35	; 0x23
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001140:	4b83      	ldr	r3, [pc, #524]	; (8001350 <HAL_RCC_OscConfig+0x688>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4013      	ands	r3, r2
 800114a:	d11a      	bne.n	8001182 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114c:	4b80      	ldr	r3, [pc, #512]	; (8001350 <HAL_RCC_OscConfig+0x688>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x688>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0049      	lsls	r1, r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb79 	bl	8000850 <HAL_GetTick>
 800115e:	0003      	movs	r3, r0
 8001160:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001164:	f7ff fb74 	bl	8000850 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e174      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001176:	4b76      	ldr	r3, [pc, #472]	; (8001350 <HAL_RCC_OscConfig+0x688>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4013      	ands	r3, r2
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	429a      	cmp	r2, r3
 800118c:	d107      	bne.n	800119e <HAL_RCC_OscConfig+0x4d6>
 800118e:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001192:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	0049      	lsls	r1, r1, #1
 8001198:	430a      	orrs	r2, r1
 800119a:	651a      	str	r2, [r3, #80]	; 0x50
 800119c:	e031      	b.n	8001202 <HAL_RCC_OscConfig+0x53a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x4f8>
 80011a6:	4b67      	ldr	r3, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011aa:	4b66      	ldr	r3, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011ac:	4967      	ldr	r1, [pc, #412]	; (800134c <HAL_RCC_OscConfig+0x684>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	651a      	str	r2, [r3, #80]	; 0x50
 80011b2:	4b64      	ldr	r3, [pc, #400]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011b6:	4b63      	ldr	r3, [pc, #396]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011b8:	4966      	ldr	r1, [pc, #408]	; (8001354 <HAL_RCC_OscConfig+0x68c>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	651a      	str	r2, [r3, #80]	; 0x50
 80011be:	e020      	b.n	8001202 <HAL_RCC_OscConfig+0x53a>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	23a0      	movs	r3, #160	; 0xa0
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d10e      	bne.n	80011ea <HAL_RCC_OscConfig+0x522>
 80011cc:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011d0:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	00c9      	lsls	r1, r1, #3
 80011d6:	430a      	orrs	r2, r1
 80011d8:	651a      	str	r2, [r3, #80]	; 0x50
 80011da:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011de:	4b59      	ldr	r3, [pc, #356]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0049      	lsls	r1, r1, #1
 80011e4:	430a      	orrs	r2, r1
 80011e6:	651a      	str	r2, [r3, #80]	; 0x50
 80011e8:	e00b      	b.n	8001202 <HAL_RCC_OscConfig+0x53a>
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011ee:	4b55      	ldr	r3, [pc, #340]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011f0:	4956      	ldr	r1, [pc, #344]	; (800134c <HAL_RCC_OscConfig+0x684>)
 80011f2:	400a      	ands	r2, r1
 80011f4:	651a      	str	r2, [r3, #80]	; 0x50
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011fa:	4b52      	ldr	r3, [pc, #328]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80011fc:	4955      	ldr	r1, [pc, #340]	; (8001354 <HAL_RCC_OscConfig+0x68c>)
 80011fe:	400a      	ands	r2, r1
 8001200:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d015      	beq.n	8001236 <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120a:	f7ff fb21 	bl	8000850 <HAL_GetTick>
 800120e:	0003      	movs	r3, r0
 8001210:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001212:	e009      	b.n	8001228 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fb1c 	bl	8000850 <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <HAL_RCC_OscConfig+0x690>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e11b      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001228:	4b46      	ldr	r3, [pc, #280]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800122a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4013      	ands	r3, r2
 8001232:	d0ef      	beq.n	8001214 <HAL_RCC_OscConfig+0x54c>
 8001234:	e014      	b.n	8001260 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff fb0b 	bl	8000850 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800123e:	e009      	b.n	8001254 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f7ff fb06 	bl	8000850 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	4a43      	ldr	r2, [pc, #268]	; (8001358 <HAL_RCC_OscConfig+0x690>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e105      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d1ef      	bne.n	8001240 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001260:	2323      	movs	r3, #35	; 0x23
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800126c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800126e:	4b35      	ldr	r3, [pc, #212]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001270:	493a      	ldr	r1, [pc, #232]	; (800135c <HAL_RCC_OscConfig+0x694>)
 8001272:	400a      	ands	r2, r1
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2220      	movs	r2, #32
 800127c:	4013      	ands	r3, r2
 800127e:	d049      	beq.n	8001314 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d026      	beq.n	80012d6 <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800128e:	2101      	movs	r1, #1
 8001290:	430a      	orrs	r2, r1
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800129a:	2101      	movs	r1, #1
 800129c:	430a      	orrs	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_RCC_OscConfig+0x698>)
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_RCC_OscConfig+0x698>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	0189      	lsls	r1, r1, #6
 80012aa:	430a      	orrs	r2, r1
 80012ac:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff facf 	bl	8000850 <HAL_GetTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012b8:	f7ff faca 	bl	8000850 <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e0ca      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2202      	movs	r2, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	d0f1      	beq.n	80012b8 <HAL_RCC_OscConfig+0x5f0>
 80012d4:	e01e      	b.n	8001314 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 80012dc:	2101      	movs	r1, #1
 80012de:	438a      	bics	r2, r1
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_RCC_OscConfig+0x698>)
 80012e4:	6a1a      	ldr	r2, [r3, #32]
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_RCC_OscConfig+0x698>)
 80012e8:	491e      	ldr	r1, [pc, #120]	; (8001364 <HAL_RCC_OscConfig+0x69c>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff faaf 	bl	8000850 <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012f8:	f7ff faaa 	bl	8000850 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e0aa      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2202      	movs	r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	d1f1      	bne.n	80012f8 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	2b00      	cmp	r3, #0
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x656>
 800131c:	e09f      	b.n	800145e <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x65e>
 8001324:	e078      	b.n	8001418 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	2b02      	cmp	r3, #2
 800132c:	d159      	bne.n	80013e2 <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_RCC_OscConfig+0x67c>)
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <HAL_RCC_OscConfig+0x6a0>)
 8001336:	400a      	ands	r2, r1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fa89 	bl	8000850 <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001342:	e01c      	b.n	800137e <HAL_RCC_OscConfig+0x6b6>
 8001344:	40021000 	.word	0x40021000
 8001348:	ffff1fff 	.word	0xffff1fff
 800134c:	fffffeff 	.word	0xfffffeff
 8001350:	40007000 	.word	0x40007000
 8001354:	fffffbff 	.word	0xfffffbff
 8001358:	00001388 	.word	0x00001388
 800135c:	efffffff 	.word	0xefffffff
 8001360:	40010000 	.word	0x40010000
 8001364:	ffffdfff 	.word	0xffffdfff
 8001368:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fa70 	bl	8000850 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e070      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	049b      	lsls	r3, r3, #18
 8001386:	4013      	ands	r3, r2
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138a:	4b37      	ldr	r3, [pc, #220]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4a37      	ldr	r2, [pc, #220]	; (800146c <HAL_RCC_OscConfig+0x7a4>)
 8001390:	4013      	ands	r3, r2
 8001392:	0019      	movs	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	431a      	orrs	r2, r3
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 80013a6:	430a      	orrs	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0449      	lsls	r1, r1, #17
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fa4a 	bl	8000850 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fa45 	bl	8000850 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e045      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	049b      	lsls	r3, r3, #18
 80013dc:	4013      	ands	r3, r2
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x6fa>
 80013e0:	e03d      	b.n	800145e <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 80013e8:	4921      	ldr	r1, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x7a8>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fa2f 	bl	8000850 <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fa2a 	bl	8000850 <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e02a      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	049b      	lsls	r3, r3, #18
 8001412:	4013      	ands	r3, r2
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x730>
 8001416:	e022      	b.n	800145e <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_RCC_OscConfig+0x7a0>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	025b      	lsls	r3, r3, #9
 8001430:	401a      	ands	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	429a      	cmp	r2, r3
 8001438:	d10f      	bne.n	800145a <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	23f0      	movs	r3, #240	; 0xf0
 800143e:	039b      	lsls	r3, r3, #14
 8001440:	401a      	ands	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d107      	bne.n	800145a <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	23c0      	movs	r3, #192	; 0xc0
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	401a      	ands	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b00a      	add	sp, #40	; 0x28
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	ff02ffff 	.word	0xff02ffff
 8001470:	feffffff 	.word	0xfeffffff

08001474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e129      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <HAL_RCC_ClockConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	4013      	ands	r3, r2
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d91e      	bls.n	80014d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b93      	ldr	r3, [pc, #588]	; (80016e4 <HAL_RCC_ClockConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	4393      	bics	r3, r2
 800149e:	0019      	movs	r1, r3
 80014a0:	4b90      	ldr	r3, [pc, #576]	; (80016e4 <HAL_RCC_ClockConfig+0x270>)
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014a8:	f7ff f9d2 	bl	8000850 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7ff f9cd 	bl	8000850 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a8a      	ldr	r2, [pc, #552]	; (80016e8 <HAL_RCC_ClockConfig+0x274>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e10a      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b87      	ldr	r3, [pc, #540]	; (80016e4 <HAL_RCC_ClockConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4013      	ands	r3, r2
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d1ee      	bne.n	80014b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d009      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014de:	4b83      	ldr	r3, [pc, #524]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	22f0      	movs	r2, #240	; 0xf0
 80014e4:	4393      	bics	r3, r2
 80014e6:	0019      	movs	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b7f      	ldr	r3, [pc, #508]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	4013      	ands	r3, r2
 80014fa:	d100      	bne.n	80014fe <HAL_RCC_ClockConfig+0x8a>
 80014fc:	e089      	b.n	8001612 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001506:	4b79      	ldr	r3, [pc, #484]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	029b      	lsls	r3, r3, #10
 800150e:	4013      	ands	r3, r2
 8001510:	d120      	bne.n	8001554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0e2      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800151e:	4b73      	ldr	r3, [pc, #460]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	049b      	lsls	r3, r3, #18
 8001526:	4013      	ands	r3, r2
 8001528:	d114      	bne.n	8001554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0d6      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d106      	bne.n	8001544 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001536:	4b6d      	ldr	r3, [pc, #436]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2204      	movs	r2, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d109      	bne.n	8001554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0cb      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001544:	4b69      	ldr	r3, [pc, #420]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0c3      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001554:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2203      	movs	r2, #3
 800155a:	4393      	bics	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4b62      	ldr	r3, [pc, #392]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001568:	f7ff f972 	bl	8000850 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d111      	bne.n	800159c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001578:	e009      	b.n	800158e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157a:	f7ff f969 	bl	8000850 <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_RCC_ClockConfig+0x274>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0a6      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800158e:	4b57      	ldr	r3, [pc, #348]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	220c      	movs	r2, #12
 8001594:	4013      	ands	r3, r2
 8001596:	2b08      	cmp	r3, #8
 8001598:	d1ef      	bne.n	800157a <HAL_RCC_ClockConfig+0x106>
 800159a:	e03a      	b.n	8001612 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d111      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a4:	e009      	b.n	80015ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a6:	f7ff f953 	bl	8000850 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4a4d      	ldr	r2, [pc, #308]	; (80016e8 <HAL_RCC_ClockConfig+0x274>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e090      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ba:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	220c      	movs	r2, #12
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d1ef      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x132>
 80015c6:	e024      	b.n	8001612 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d11b      	bne.n	8001608 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d0:	e009      	b.n	80015e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d2:	f7ff f93d 	bl	8000850 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <HAL_RCC_ClockConfig+0x274>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e07a      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	220c      	movs	r2, #12
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d1ef      	bne.n	80015d2 <HAL_RCC_ClockConfig+0x15e>
 80015f2:	e00e      	b.n	8001612 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f7ff f92c 	bl	8000850 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	4a3a      	ldr	r2, [pc, #232]	; (80016e8 <HAL_RCC_ClockConfig+0x274>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e069      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	220c      	movs	r2, #12
 800160e:	4013      	ands	r3, r2
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_ClockConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d21e      	bcs.n	800165e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_ClockConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	4393      	bics	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_RCC_ClockConfig+0x270>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001632:	f7ff f90d 	bl	8000850 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	e009      	b.n	8001650 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7ff f908 	bl	8000850 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	4a28      	ldr	r2, [pc, #160]	; (80016e8 <HAL_RCC_ClockConfig+0x274>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e045      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_ClockConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d1ee      	bne.n	800163c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2204      	movs	r2, #4
 8001664:	4013      	ands	r3, r2
 8001666:	d009      	beq.n	800167c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <HAL_RCC_ClockConfig+0x27c>)
 800166e:	4013      	ands	r3, r2
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001678:	430a      	orrs	r2, r1
 800167a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2208      	movs	r2, #8
 8001682:	4013      	ands	r3, r2
 8001684:	d00a      	beq.n	800169c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_RCC_ClockConfig+0x280>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	00da      	lsls	r2, r3, #3
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 8001698:	430a      	orrs	r2, r1
 800169a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800169c:	f000 f832 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 80016a0:	0001      	movs	r1, r0
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_ClockConfig+0x278>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	220f      	movs	r2, #15
 80016aa:	4013      	ands	r3, r2
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <HAL_RCC_ClockConfig+0x284>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	000a      	movs	r2, r1
 80016b2:	40da      	lsrs	r2, r3
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_RCC_ClockConfig+0x288>)
 80016b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_RCC_ClockConfig+0x28c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	250b      	movs	r5, #11
 80016be:	197c      	adds	r4, r7, r5
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff f87f 	bl	80007c4 <HAL_InitTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80016ca:	197b      	adds	r3, r7, r5
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 80016d2:	230b      	movs	r3, #11
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	e000      	b.n	80016dc <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b004      	add	sp, #16
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	40022000 	.word	0x40022000
 80016e8:	00001388 	.word	0x00001388
 80016ec:	40021000 	.word	0x40021000
 80016f0:	fffff8ff 	.word	0xfffff8ff
 80016f4:	ffffc7ff 	.word	0xffffc7ff
 80016f8:	08002700 	.word	0x08002700
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b08f      	sub	sp, #60	; 0x3c
 8001708:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_RCC_GetSysClockFreq+0x130>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001712:	230c      	movs	r3, #12
 8001714:	4013      	ands	r3, r2
 8001716:	2b08      	cmp	r3, #8
 8001718:	d00f      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x36>
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d010      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x3c>
 800171e:	2b04      	cmp	r3, #4
 8001720:	d000      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x20>
 8001722:	e073      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_GetSysClockFreq+0x130>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2210      	movs	r2, #16
 800172a:	4013      	ands	r3, r2
 800172c:	d002      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <HAL_RCC_GetSysClockFreq+0x134>)
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001732:	e079      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_RCC_GetSysClockFreq+0x138>)
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001738:	e076      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800173a:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_GetSysClockFreq+0x13c>)
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800173e:	e073      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	0c9a      	lsrs	r2, r3, #18
 8001744:	230f      	movs	r3, #15
 8001746:	401a      	ands	r2, r3
 8001748:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <HAL_RCC_GetSysClockFreq+0x140>)
 800174a:	5c9b      	ldrb	r3, [r3, r2]
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	0d9a      	lsrs	r2, r3, #22
 8001752:	2303      	movs	r3, #3
 8001754:	4013      	ands	r3, r2
 8001756:	3301      	adds	r3, #1
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_GetSysClockFreq+0x130>)
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	025b      	lsls	r3, r3, #9
 8001762:	4013      	ands	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	4a34      	ldr	r2, [pc, #208]	; (8001840 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001770:	2300      	movs	r3, #0
 8001772:	69b8      	ldr	r0, [r7, #24]
 8001774:	69f9      	ldr	r1, [r7, #28]
 8001776:	f7fe fd73 	bl	8000260 <__aeabi_lmul>
 800177a:	0003      	movs	r3, r0
 800177c:	000c      	movs	r4, r1
 800177e:	0018      	movs	r0, r3
 8001780:	0021      	movs	r1, r4
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f7fe fd47 	bl	8000220 <__aeabi_uldivmod>
 8001792:	0003      	movs	r3, r0
 8001794:	000c      	movs	r4, r1
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
 8001798:	e035      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_RCC_GetSysClockFreq+0x130>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2210      	movs	r2, #16
 80017a0:	4013      	ands	r3, r2
 80017a2:	d019      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	4a22      	ldr	r2, [pc, #136]	; (8001838 <HAL_RCC_GetSysClockFreq+0x134>)
 80017ae:	2300      	movs	r3, #0
 80017b0:	68b8      	ldr	r0, [r7, #8]
 80017b2:	68f9      	ldr	r1, [r7, #12]
 80017b4:	f7fe fd54 	bl	8000260 <__aeabi_lmul>
 80017b8:	0003      	movs	r3, r0
 80017ba:	000c      	movs	r4, r1
 80017bc:	0018      	movs	r0, r3
 80017be:	0021      	movs	r1, r4
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f7fe fd28 	bl	8000220 <__aeabi_uldivmod>
 80017d0:	0003      	movs	r3, r0
 80017d2:	000c      	movs	r4, r1
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
 80017d6:	e016      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017da:	0018      	movs	r0, r3
 80017dc:	2300      	movs	r3, #0
 80017de:	0019      	movs	r1, r3
 80017e0:	4a16      	ldr	r2, [pc, #88]	; (800183c <HAL_RCC_GetSysClockFreq+0x138>)
 80017e2:	2300      	movs	r3, #0
 80017e4:	f7fe fd3c 	bl	8000260 <__aeabi_lmul>
 80017e8:	0003      	movs	r3, r0
 80017ea:	000c      	movs	r4, r1
 80017ec:	0018      	movs	r0, r3
 80017ee:	0021      	movs	r1, r4
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	001d      	movs	r5, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	001e      	movs	r6, r3
 80017f8:	002a      	movs	r2, r5
 80017fa:	0033      	movs	r3, r6
 80017fc:	f7fe fd10 	bl	8000220 <__aeabi_uldivmod>
 8001800:	0003      	movs	r3, r0
 8001802:	000c      	movs	r4, r1
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800180a:	e00d      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_GetSysClockFreq+0x130>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	0b5b      	lsrs	r3, r3, #13
 8001812:	2207      	movs	r2, #7
 8001814:	4013      	ands	r3, r2
 8001816:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	3301      	adds	r3, #1
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	0212      	lsls	r2, r2, #8
 8001820:	409a      	lsls	r2, r3
 8001822:	0013      	movs	r3, r2
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001826:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b00f      	add	sp, #60	; 0x3c
 8001830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40021000 	.word	0x40021000
 8001838:	003d0900 	.word	0x003d0900
 800183c:	00f42400 	.word	0x00f42400
 8001840:	007a1200 	.word	0x007a1200
 8001844:	08002718 	.word	0x08002718

08001848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800184c:	4b02      	ldr	r3, [pc, #8]	; (8001858 <HAL_RCC_GetHCLKFreq+0x10>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	20000000 	.word	0x20000000

0800185c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001860:	f7ff fff2 	bl	8001848 <HAL_RCC_GetHCLKFreq>
 8001864:	0001      	movs	r1, r0
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	0a1b      	lsrs	r3, r3, #8
 800186c:	2207      	movs	r2, #7
 800186e:	4013      	ands	r3, r2
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	40d9      	lsrs	r1, r3
 8001876:	000b      	movs	r3, r1
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40021000 	.word	0x40021000
 8001884:	08002710 	.word	0x08002710

08001888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800188c:	f7ff ffdc 	bl	8001848 <HAL_RCC_GetHCLKFreq>
 8001890:	0001      	movs	r1, r0
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	0adb      	lsrs	r3, r3, #11
 8001898:	2207      	movs	r2, #7
 800189a:	4013      	ands	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	40d9      	lsrs	r1, r3
 80018a2:	000b      	movs	r3, r1
}
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08002710 	.word	0x08002710

080018b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80018bc:	2317      	movs	r3, #23
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2220      	movs	r2, #32
 80018ca:	4013      	ands	r3, r2
 80018cc:	d106      	bne.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4013      	ands	r3, r2
 80018d8:	d100      	bne.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80018da:	e0d9      	b.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018dc:	4ba4      	ldr	r3, [pc, #656]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80018de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	055b      	lsls	r3, r3, #21
 80018e4:	4013      	ands	r3, r2
 80018e6:	d10a      	bne.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e8:	4ba1      	ldr	r3, [pc, #644]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80018ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ec:	4ba0      	ldr	r3, [pc, #640]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0549      	lsls	r1, r1, #21
 80018f2:	430a      	orrs	r2, r1
 80018f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80018f6:	2317      	movs	r3, #23
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4013      	ands	r3, r2
 8001908:	d11a      	bne.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190a:	4b9a      	ldr	r3, [pc, #616]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b99      	ldr	r3, [pc, #612]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0049      	lsls	r1, r1, #1
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001918:	f7fe ff9a 	bl	8000850 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7fe ff95 	bl	8000850 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e118      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b8f      	ldr	r3, [pc, #572]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d0f0      	beq.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001940:	4b8b      	ldr	r3, [pc, #556]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	039b      	lsls	r3, r3, #14
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	23c0      	movs	r3, #192	; 0xc0
 8001952:	039b      	lsls	r3, r3, #14
 8001954:	4013      	ands	r3, r2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d107      	bne.n	800196c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	23c0      	movs	r3, #192	; 0xc0
 8001962:	039b      	lsls	r3, r3, #14
 8001964:	4013      	ands	r3, r2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d013      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	029b      	lsls	r3, r3, #10
 8001974:	401a      	ands	r2, r3
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	029b      	lsls	r3, r3, #10
 800197a:	429a      	cmp	r2, r3
 800197c:	d10a      	bne.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800197e:	4b7c      	ldr	r3, [pc, #496]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	029b      	lsls	r3, r3, #10
 8001986:	401a      	ands	r2, r3
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	429a      	cmp	r2, r3
 800198e:	d101      	bne.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0e8      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001994:	4b76      	ldr	r3, [pc, #472]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001996:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001998:	23c0      	movs	r3, #192	; 0xc0
 800199a:	029b      	lsls	r3, r3, #10
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d049      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	23c0      	movs	r3, #192	; 0xc0
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	4013      	ands	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d004      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2220      	movs	r2, #32
 80019bc:	4013      	ands	r3, r2
 80019be:	d10d      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	23c0      	movs	r3, #192	; 0xc0
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d034      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4013      	ands	r3, r2
 80019da:	d02e      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80019dc:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80019de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e0:	4a65      	ldr	r2, [pc, #404]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80019e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ea:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0309      	lsls	r1, r1, #12
 80019f0:	430a      	orrs	r2, r1
 80019f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019f4:	4b5e      	ldr	r3, [pc, #376]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80019f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f8:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80019fa:	4960      	ldr	r1, [pc, #384]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d014      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe ff1e 	bl	8000850 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a18:	e009      	b.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7fe ff19 	bl	8000850 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e09b      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d0ef      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	23c0      	movs	r3, #192	; 0xc0
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	401a      	ands	r2, r3
 8001a44:	23c0      	movs	r3, #192	; 0xc0
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10c      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001a4c:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	039b      	lsls	r3, r3, #14
 8001a5e:	401a      	ands	r2, r3
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	23c0      	movs	r3, #192	; 0xc0
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	401a      	ands	r2, r3
 8001a74:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a7a:	2317      	movs	r3, #23
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a84:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a8a:	493f      	ldr	r1, [pc, #252]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4013      	ands	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d009      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	220c      	movs	r2, #12
 8001abe:	4393      	bics	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a2c      	ldr	r2, [pc, #176]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2208      	movs	r2, #8
 8001af0:	4013      	ands	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	4a25      	ldr	r2, [pc, #148]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d009      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001b60:	430a      	orrs	r2, r1
 8001b62:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b006      	add	sp, #24
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40007000 	.word	0x40007000
 8001b78:	fffcffff 	.word	0xfffcffff
 8001b7c:	fff7ffff 	.word	0xfff7ffff
 8001b80:	00001388 	.word	0x00001388
 8001b84:	ffcfffff 	.word	0xffcfffff
 8001b88:	efffffff 	.word	0xefffffff
 8001b8c:	fffff3ff 	.word	0xfffff3ff
 8001b90:	ffffcfff 	.word	0xffffcfff
 8001b94:	fbffffff 	.word	0xfbffffff
 8001b98:	fff3ffff 	.word	0xfff3ffff

08001b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e044      	b.n	8001c38 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2274      	movs	r2, #116	; 0x74
 8001bba:	2100      	movs	r1, #0
 8001bbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7fe fd55 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2224      	movs	r2, #36	; 0x24
 8001bca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f91e 	bl	8001e20 <UART_SetConfig>
 8001be4:	0003      	movs	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e024      	b.n	8001c38 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f000 fbcd 	bl	8002398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	490d      	ldr	r1, [pc, #52]	; (8001c40 <HAL_UART_Init+0xa4>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	212a      	movs	r1, #42	; 0x2a
 8001c1a:	438a      	bics	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 fc65 	bl	8002500 <UART_CheckIdleState>
 8001c36:	0003      	movs	r3, r0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	ffffb7ff 	.word	0xffffb7ff

08001c44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	1dbb      	adds	r3, r7, #6
 8001c52:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d000      	beq.n	8001c5e <HAL_UART_Receive+0x1a>
 8001c5c:	e0d9      	b.n	8001e12 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_UART_Receive+0x28>
 8001c64:	1dbb      	adds	r3, r7, #6
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0d1      	b.n	8001e14 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	015b      	lsls	r3, r3, #5
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d109      	bne.n	8001c90 <HAL_UART_Receive+0x4c>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0c1      	b.n	8001e14 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2274      	movs	r2, #116	; 0x74
 8001c94:	5c9b      	ldrb	r3, [r3, r2]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_UART_Receive+0x5a>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e0ba      	b.n	8001e14 <HAL_UART_Receive+0x1d0>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2274      	movs	r2, #116	; 0x74
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	2100      	movs	r1, #0
 8001cac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2222      	movs	r2, #34	; 0x22
 8001cb2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cba:	f7fe fdc9 	bl	8000850 <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1dba      	adds	r2, r7, #6
 8001cc6:	2158      	movs	r1, #88	; 0x58
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1dba      	adds	r2, r7, #6
 8001cd0:	215a      	movs	r1, #90	; 0x5a
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d10d      	bne.n	8001cfe <HAL_UART_Receive+0xba>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d104      	bne.n	8001cf4 <HAL_UART_Receive+0xb0>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	225c      	movs	r2, #92	; 0x5c
 8001cee:	494b      	ldr	r1, [pc, #300]	; (8001e1c <HAL_UART_Receive+0x1d8>)
 8001cf0:	5299      	strh	r1, [r3, r2]
 8001cf2:	e02e      	b.n	8001d52 <HAL_UART_Receive+0x10e>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	225c      	movs	r2, #92	; 0x5c
 8001cf8:	21ff      	movs	r1, #255	; 0xff
 8001cfa:	5299      	strh	r1, [r3, r2]
 8001cfc:	e029      	b.n	8001d52 <HAL_UART_Receive+0x10e>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_UART_Receive+0xde>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d104      	bne.n	8001d18 <HAL_UART_Receive+0xd4>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	225c      	movs	r2, #92	; 0x5c
 8001d12:	21ff      	movs	r1, #255	; 0xff
 8001d14:	5299      	strh	r1, [r3, r2]
 8001d16:	e01c      	b.n	8001d52 <HAL_UART_Receive+0x10e>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	225c      	movs	r2, #92	; 0x5c
 8001d1c:	217f      	movs	r1, #127	; 0x7f
 8001d1e:	5299      	strh	r1, [r3, r2]
 8001d20:	e017      	b.n	8001d52 <HAL_UART_Receive+0x10e>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	055b      	lsls	r3, r3, #21
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d10d      	bne.n	8001d4a <HAL_UART_Receive+0x106>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d104      	bne.n	8001d40 <HAL_UART_Receive+0xfc>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	225c      	movs	r2, #92	; 0x5c
 8001d3a:	217f      	movs	r1, #127	; 0x7f
 8001d3c:	5299      	strh	r1, [r3, r2]
 8001d3e:	e008      	b.n	8001d52 <HAL_UART_Receive+0x10e>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	225c      	movs	r2, #92	; 0x5c
 8001d44:	213f      	movs	r1, #63	; 0x3f
 8001d46:	5299      	strh	r1, [r3, r2]
 8001d48:	e003      	b.n	8001d52 <HAL_UART_Receive+0x10e>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	225c      	movs	r2, #92	; 0x5c
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001d52:	2312      	movs	r3, #18
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	215c      	movs	r1, #92	; 0x5c
 8001d5a:	5a52      	ldrh	r2, [r2, r1]
 8001d5c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	015b      	lsls	r3, r3, #5
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d108      	bne.n	8001d7c <HAL_UART_Receive+0x138>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e003      	b.n	8001d84 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2274      	movs	r2, #116	; 0x74
 8001d88:	2100      	movs	r1, #0
 8001d8a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001d8c:	e036      	b.n	8001dfc <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	0013      	movs	r3, r2
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	f000 fbfa 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 8001da0:	1e03      	subs	r3, r0, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e035      	b.n	8001e14 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2212      	movs	r2, #18
 8001db8:	18ba      	adds	r2, r7, r2
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	e00e      	b.n	8001dea <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2212      	movs	r2, #18
 8001dd6:	18ba      	adds	r2, r7, r2
 8001dd8:	8812      	ldrh	r2, [r2, #0]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	3301      	adds	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	225a      	movs	r2, #90	; 0x5a
 8001dee:	5a9b      	ldrh	r3, [r3, r2]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b299      	uxth	r1, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	225a      	movs	r2, #90	; 0x5a
 8001dfa:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	225a      	movs	r2, #90	; 0x5a
 8001e00:	5a9b      	ldrh	r3, [r3, r2]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1c2      	bne.n	8001d8e <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b008      	add	sp, #32
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	000001ff 	.word	0x000001ff

08001e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e28:	231a      	movs	r3, #26
 8001e2a:	2218      	movs	r2, #24
 8001e2c:	4694      	mov	ip, r2
 8001e2e:	44bc      	add	ip, r7
 8001e30:	4463      	add	r3, ip
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4acb      	ldr	r2, [pc, #812]	; (8002184 <UART_SetConfig+0x364>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4ac7      	ldr	r2, [pc, #796]	; (8002188 <UART_SetConfig+0x368>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4ac1      	ldr	r2, [pc, #772]	; (800218c <UART_SetConfig+0x36c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d004      	beq.n	8001e96 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e92:	4313      	orrs	r3, r2
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4abc      	ldr	r2, [pc, #752]	; (8002190 <UART_SetConfig+0x370>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4ab8      	ldr	r2, [pc, #736]	; (8002194 <UART_SetConfig+0x374>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d134      	bne.n	8001f20 <UART_SetConfig+0x100>
 8001eb6:	4bb8      	ldr	r3, [pc, #736]	; (8002198 <UART_SetConfig+0x378>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	2203      	movs	r2, #3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d015      	beq.n	8001eee <UART_SetConfig+0xce>
 8001ec2:	d304      	bcc.n	8001ece <UART_SetConfig+0xae>
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d00a      	beq.n	8001ede <UART_SetConfig+0xbe>
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d018      	beq.n	8001efe <UART_SetConfig+0xde>
 8001ecc:	e01f      	b.n	8001f0e <UART_SetConfig+0xee>
 8001ece:	231b      	movs	r3, #27
 8001ed0:	2218      	movs	r2, #24
 8001ed2:	4694      	mov	ip, r2
 8001ed4:	44bc      	add	ip, r7
 8001ed6:	4463      	add	r3, ip
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e0c5      	b.n	800206a <UART_SetConfig+0x24a>
 8001ede:	231b      	movs	r3, #27
 8001ee0:	2218      	movs	r2, #24
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	44bc      	add	ip, r7
 8001ee6:	4463      	add	r3, ip
 8001ee8:	2202      	movs	r2, #2
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e0bd      	b.n	800206a <UART_SetConfig+0x24a>
 8001eee:	231b      	movs	r3, #27
 8001ef0:	2218      	movs	r2, #24
 8001ef2:	4694      	mov	ip, r2
 8001ef4:	44bc      	add	ip, r7
 8001ef6:	4463      	add	r3, ip
 8001ef8:	2204      	movs	r2, #4
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e0b5      	b.n	800206a <UART_SetConfig+0x24a>
 8001efe:	231b      	movs	r3, #27
 8001f00:	2218      	movs	r2, #24
 8001f02:	4694      	mov	ip, r2
 8001f04:	44bc      	add	ip, r7
 8001f06:	4463      	add	r3, ip
 8001f08:	2208      	movs	r2, #8
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e0ad      	b.n	800206a <UART_SetConfig+0x24a>
 8001f0e:	231b      	movs	r3, #27
 8001f10:	2218      	movs	r2, #24
 8001f12:	4694      	mov	ip, r2
 8001f14:	44bc      	add	ip, r7
 8001f16:	4463      	add	r3, ip
 8001f18:	2210      	movs	r2, #16
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	e0a4      	b.n	800206a <UART_SetConfig+0x24a>
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a9d      	ldr	r2, [pc, #628]	; (800219c <UART_SetConfig+0x37c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d137      	bne.n	8001f9a <UART_SetConfig+0x17a>
 8001f2a:	4b9b      	ldr	r3, [pc, #620]	; (8002198 <UART_SetConfig+0x378>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	220c      	movs	r2, #12
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d018      	beq.n	8001f68 <UART_SetConfig+0x148>
 8001f36:	d802      	bhi.n	8001f3e <UART_SetConfig+0x11e>
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <UART_SetConfig+0x128>
 8001f3c:	e024      	b.n	8001f88 <UART_SetConfig+0x168>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d00a      	beq.n	8001f58 <UART_SetConfig+0x138>
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d018      	beq.n	8001f78 <UART_SetConfig+0x158>
 8001f46:	e01f      	b.n	8001f88 <UART_SetConfig+0x168>
 8001f48:	231b      	movs	r3, #27
 8001f4a:	2218      	movs	r2, #24
 8001f4c:	4694      	mov	ip, r2
 8001f4e:	44bc      	add	ip, r7
 8001f50:	4463      	add	r3, ip
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e088      	b.n	800206a <UART_SetConfig+0x24a>
 8001f58:	231b      	movs	r3, #27
 8001f5a:	2218      	movs	r2, #24
 8001f5c:	4694      	mov	ip, r2
 8001f5e:	44bc      	add	ip, r7
 8001f60:	4463      	add	r3, ip
 8001f62:	2202      	movs	r2, #2
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e080      	b.n	800206a <UART_SetConfig+0x24a>
 8001f68:	231b      	movs	r3, #27
 8001f6a:	2218      	movs	r2, #24
 8001f6c:	4694      	mov	ip, r2
 8001f6e:	44bc      	add	ip, r7
 8001f70:	4463      	add	r3, ip
 8001f72:	2204      	movs	r2, #4
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e078      	b.n	800206a <UART_SetConfig+0x24a>
 8001f78:	231b      	movs	r3, #27
 8001f7a:	2218      	movs	r2, #24
 8001f7c:	4694      	mov	ip, r2
 8001f7e:	44bc      	add	ip, r7
 8001f80:	4463      	add	r3, ip
 8001f82:	2208      	movs	r2, #8
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e070      	b.n	800206a <UART_SetConfig+0x24a>
 8001f88:	231b      	movs	r3, #27
 8001f8a:	2218      	movs	r2, #24
 8001f8c:	4694      	mov	ip, r2
 8001f8e:	44bc      	add	ip, r7
 8001f90:	4463      	add	r3, ip
 8001f92:	2210      	movs	r2, #16
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	e067      	b.n	800206a <UART_SetConfig+0x24a>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a80      	ldr	r2, [pc, #512]	; (80021a0 <UART_SetConfig+0x380>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d107      	bne.n	8001fb4 <UART_SetConfig+0x194>
 8001fa4:	231b      	movs	r3, #27
 8001fa6:	2218      	movs	r2, #24
 8001fa8:	4694      	mov	ip, r2
 8001faa:	44bc      	add	ip, r7
 8001fac:	4463      	add	r3, ip
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e05a      	b.n	800206a <UART_SetConfig+0x24a>
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a7a      	ldr	r2, [pc, #488]	; (80021a4 <UART_SetConfig+0x384>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d107      	bne.n	8001fce <UART_SetConfig+0x1ae>
 8001fbe:	231b      	movs	r3, #27
 8001fc0:	2218      	movs	r2, #24
 8001fc2:	4694      	mov	ip, r2
 8001fc4:	44bc      	add	ip, r7
 8001fc6:	4463      	add	r3, ip
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e04d      	b.n	800206a <UART_SetConfig+0x24a>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	; (800218c <UART_SetConfig+0x36c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d141      	bne.n	800205c <UART_SetConfig+0x23c>
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <UART_SetConfig+0x378>)
 8001fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fdc:	23c0      	movs	r3, #192	; 0xc0
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	00d2      	lsls	r2, r2, #3
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <UART_SetConfig+0x20a>
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	00d2      	lsls	r2, r2, #3
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d802      	bhi.n	8001ff8 <UART_SetConfig+0x1d8>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <UART_SetConfig+0x1ea>
 8001ff6:	e028      	b.n	800204a <UART_SetConfig+0x22a>
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00c      	beq.n	800201a <UART_SetConfig+0x1fa>
 8002000:	22c0      	movs	r2, #192	; 0xc0
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	4293      	cmp	r3, r2
 8002006:	d018      	beq.n	800203a <UART_SetConfig+0x21a>
 8002008:	e01f      	b.n	800204a <UART_SetConfig+0x22a>
 800200a:	231b      	movs	r3, #27
 800200c:	2218      	movs	r2, #24
 800200e:	4694      	mov	ip, r2
 8002010:	44bc      	add	ip, r7
 8002012:	4463      	add	r3, ip
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e027      	b.n	800206a <UART_SetConfig+0x24a>
 800201a:	231b      	movs	r3, #27
 800201c:	2218      	movs	r2, #24
 800201e:	4694      	mov	ip, r2
 8002020:	44bc      	add	ip, r7
 8002022:	4463      	add	r3, ip
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e01f      	b.n	800206a <UART_SetConfig+0x24a>
 800202a:	231b      	movs	r3, #27
 800202c:	2218      	movs	r2, #24
 800202e:	4694      	mov	ip, r2
 8002030:	44bc      	add	ip, r7
 8002032:	4463      	add	r3, ip
 8002034:	2204      	movs	r2, #4
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e017      	b.n	800206a <UART_SetConfig+0x24a>
 800203a:	231b      	movs	r3, #27
 800203c:	2218      	movs	r2, #24
 800203e:	4694      	mov	ip, r2
 8002040:	44bc      	add	ip, r7
 8002042:	4463      	add	r3, ip
 8002044:	2208      	movs	r2, #8
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e00f      	b.n	800206a <UART_SetConfig+0x24a>
 800204a:	231b      	movs	r3, #27
 800204c:	2218      	movs	r2, #24
 800204e:	4694      	mov	ip, r2
 8002050:	44bc      	add	ip, r7
 8002052:	4463      	add	r3, ip
 8002054:	2210      	movs	r2, #16
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	e006      	b.n	800206a <UART_SetConfig+0x24a>
 800205c:	231b      	movs	r3, #27
 800205e:	2218      	movs	r2, #24
 8002060:	4694      	mov	ip, r2
 8002062:	44bc      	add	ip, r7
 8002064:	4463      	add	r3, ip
 8002066:	2210      	movs	r2, #16
 8002068:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a47      	ldr	r2, [pc, #284]	; (800218c <UART_SetConfig+0x36c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d000      	beq.n	8002076 <UART_SetConfig+0x256>
 8002074:	e0a0      	b.n	80021b8 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002076:	231b      	movs	r3, #27
 8002078:	2218      	movs	r2, #24
 800207a:	4694      	mov	ip, r2
 800207c:	44bc      	add	ip, r7
 800207e:	4463      	add	r3, ip
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d00d      	beq.n	80020a2 <UART_SetConfig+0x282>
 8002086:	dc02      	bgt.n	800208e <UART_SetConfig+0x26e>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <UART_SetConfig+0x278>
 800208c:	e01d      	b.n	80020ca <UART_SetConfig+0x2aa>
 800208e:	2b04      	cmp	r3, #4
 8002090:	d012      	beq.n	80020b8 <UART_SetConfig+0x298>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d015      	beq.n	80020c2 <UART_SetConfig+0x2a2>
 8002096:	e018      	b.n	80020ca <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002098:	f7ff fbe0 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 800209c:	0003      	movs	r3, r0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020a0:	e01d      	b.n	80020de <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <UART_SetConfig+0x378>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2210      	movs	r2, #16
 80020a8:	4013      	ands	r3, r2
 80020aa:	d002      	beq.n	80020b2 <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80020ac:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <UART_SetConfig+0x388>)
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80020b0:	e015      	b.n	80020de <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <UART_SetConfig+0x38c>)
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020b6:	e012      	b.n	80020de <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020b8:	f7ff fb24 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 80020bc:	0003      	movs	r3, r0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020c0:	e00d      	b.n	80020de <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020c8:	e009      	b.n	80020de <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80020ce:	231a      	movs	r3, #26
 80020d0:	2218      	movs	r2, #24
 80020d2:	4694      	mov	ip, r2
 80020d4:	44bc      	add	ip, r7
 80020d6:	4463      	add	r3, ip
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
        break;
 80020dc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d100      	bne.n	80020e6 <UART_SetConfig+0x2c6>
 80020e4:	e13c      	b.n	8002360 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	0013      	movs	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	189b      	adds	r3, r3, r2
 80020f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d305      	bcc.n	8002102 <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80020fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020fe:	429a      	cmp	r2, r3
 8002100:	d907      	bls.n	8002112 <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 8002102:	231a      	movs	r3, #26
 8002104:	2218      	movs	r2, #24
 8002106:	4694      	mov	ip, r2
 8002108:	44bc      	add	ip, r7
 800210a:	4463      	add	r3, ip
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e126      	b.n	8002360 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	000b      	movs	r3, r1
 8002120:	0e1b      	lsrs	r3, r3, #24
 8002122:	0010      	movs	r0, r2
 8002124:	0205      	lsls	r5, r0, #8
 8002126:	431d      	orrs	r5, r3
 8002128:	000b      	movs	r3, r1
 800212a:	021c      	lsls	r4, r3, #8
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68b8      	ldr	r0, [r7, #8]
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	1900      	adds	r0, r0, r4
 800213e:	4169      	adcs	r1, r5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f7fe f867 	bl	8000220 <__aeabi_uldivmod>
 8002152:	0003      	movs	r3, r0
 8002154:	000c      	movs	r4, r1
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <UART_SetConfig+0x390>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d908      	bls.n	8002172 <UART_SetConfig+0x352>
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <UART_SetConfig+0x394>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d804      	bhi.n	8002172 <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	e0f6      	b.n	8002360 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 8002172:	231a      	movs	r3, #26
 8002174:	2218      	movs	r2, #24
 8002176:	4694      	mov	ip, r2
 8002178:	44bc      	add	ip, r7
 800217a:	4463      	add	r3, ip
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e0ee      	b.n	8002360 <UART_SetConfig+0x540>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	efff69f3 	.word	0xefff69f3
 8002188:	ffffcfff 	.word	0xffffcfff
 800218c:	40004800 	.word	0x40004800
 8002190:	fffff4ff 	.word	0xfffff4ff
 8002194:	40013800 	.word	0x40013800
 8002198:	40021000 	.word	0x40021000
 800219c:	40004400 	.word	0x40004400
 80021a0:	40004c00 	.word	0x40004c00
 80021a4:	40005000 	.word	0x40005000
 80021a8:	003d0900 	.word	0x003d0900
 80021ac:	00f42400 	.word	0x00f42400
 80021b0:	000002ff 	.word	0x000002ff
 80021b4:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d000      	beq.n	80021c6 <UART_SetConfig+0x3a6>
 80021c4:	e073      	b.n	80022ae <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 80021c6:	231b      	movs	r3, #27
 80021c8:	2218      	movs	r2, #24
 80021ca:	4694      	mov	ip, r2
 80021cc:	44bc      	add	ip, r7
 80021ce:	4463      	add	r3, ip
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d822      	bhi.n	800221c <UART_SetConfig+0x3fc>
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <UART_SetConfig+0x560>)
 80021da:	18d3      	adds	r3, r2, r3
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021e0:	f7ff fb3c 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 80021e4:	0003      	movs	r3, r0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021e8:	e022      	b.n	8002230 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80021ea:	f7ff fb4d 	bl	8001888 <HAL_RCC_GetPCLK2Freq>
 80021ee:	0003      	movs	r3, r0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021f2:	e01d      	b.n	8002230 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <UART_SetConfig+0x564>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2210      	movs	r2, #16
 80021fa:	4013      	ands	r3, r2
 80021fc:	d002      	beq.n	8002204 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80021fe:	4b62      	ldr	r3, [pc, #392]	; (8002388 <UART_SetConfig+0x568>)
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002202:	e015      	b.n	8002230 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <UART_SetConfig+0x56c>)
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002208:	e012      	b.n	8002230 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800220a:	f7ff fa7b 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 800220e:	0003      	movs	r3, r0
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002212:	e00d      	b.n	8002230 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800221a:	e009      	b.n	8002230 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002220:	231a      	movs	r3, #26
 8002222:	2218      	movs	r2, #24
 8002224:	4694      	mov	ip, r2
 8002226:	44bc      	add	ip, r7
 8002228:	4463      	add	r3, ip
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
        break;
 800222e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <UART_SetConfig+0x418>
 8002236:	e093      	b.n	8002360 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	005a      	lsls	r2, r3, #1
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	18d2      	adds	r2, r2, r3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0019      	movs	r1, r3
 800224a:	0010      	movs	r0, r2
 800224c:	f7fd ff5c 	bl	8000108 <__udivsi3>
 8002250:	0003      	movs	r3, r0
 8002252:	b29b      	uxth	r3, r3
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d920      	bls.n	800229e <UART_SetConfig+0x47e>
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <UART_SetConfig+0x570>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d81c      	bhi.n	800229e <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	b29a      	uxth	r2, r3
 8002268:	200e      	movs	r0, #14
 800226a:	2418      	movs	r4, #24
 800226c:	193b      	adds	r3, r7, r4
 800226e:	181b      	adds	r3, r3, r0
 8002270:	210f      	movs	r1, #15
 8002272:	438a      	bics	r2, r1
 8002274:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	b29b      	uxth	r3, r3
 800227c:	2207      	movs	r2, #7
 800227e:	4013      	ands	r3, r2
 8002280:	b299      	uxth	r1, r3
 8002282:	193b      	adds	r3, r7, r4
 8002284:	181b      	adds	r3, r3, r0
 8002286:	193a      	adds	r2, r7, r4
 8002288:	1812      	adds	r2, r2, r0
 800228a:	8812      	ldrh	r2, [r2, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	193a      	adds	r2, r7, r4
 8002296:	1812      	adds	r2, r2, r0
 8002298:	8812      	ldrh	r2, [r2, #0]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	e060      	b.n	8002360 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 800229e:	231a      	movs	r3, #26
 80022a0:	2218      	movs	r2, #24
 80022a2:	4694      	mov	ip, r2
 80022a4:	44bc      	add	ip, r7
 80022a6:	4463      	add	r3, ip
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e058      	b.n	8002360 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022ae:	231b      	movs	r3, #27
 80022b0:	2218      	movs	r2, #24
 80022b2:	4694      	mov	ip, r2
 80022b4:	44bc      	add	ip, r7
 80022b6:	4463      	add	r3, ip
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d822      	bhi.n	8002304 <UART_SetConfig+0x4e4>
 80022be:	009a      	lsls	r2, r3, #2
 80022c0:	4b34      	ldr	r3, [pc, #208]	; (8002394 <UART_SetConfig+0x574>)
 80022c2:	18d3      	adds	r3, r2, r3
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022c8:	f7ff fac8 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 80022cc:	0003      	movs	r3, r0
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022d0:	e022      	b.n	8002318 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022d2:	f7ff fad9 	bl	8001888 <HAL_RCC_GetPCLK2Freq>
 80022d6:	0003      	movs	r3, r0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022da:	e01d      	b.n	8002318 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <UART_SetConfig+0x564>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2210      	movs	r2, #16
 80022e2:	4013      	ands	r3, r2
 80022e4:	d002      	beq.n	80022ec <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <UART_SetConfig+0x568>)
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022ea:	e015      	b.n	8002318 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <UART_SetConfig+0x56c>)
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022f0:	e012      	b.n	8002318 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022f2:	f7ff fa07 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 80022f6:	0003      	movs	r3, r0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022fa:	e00d      	b.n	8002318 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002302:	e009      	b.n	8002318 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002308:	231a      	movs	r3, #26
 800230a:	2218      	movs	r2, #24
 800230c:	4694      	mov	ip, r2
 800230e:	44bc      	add	ip, r7
 8002310:	4463      	add	r3, ip
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
        break;
 8002316:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d020      	beq.n	8002360 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	085a      	lsrs	r2, r3, #1
 8002324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002326:	18d2      	adds	r2, r2, r3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0019      	movs	r1, r3
 800232e:	0010      	movs	r0, r2
 8002330:	f7fd feea 	bl	8000108 <__udivsi3>
 8002334:	0003      	movs	r3, r0
 8002336:	b29b      	uxth	r3, r3
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d908      	bls.n	8002352 <UART_SetConfig+0x532>
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	4a13      	ldr	r2, [pc, #76]	; (8002390 <UART_SetConfig+0x570>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d804      	bhi.n	8002352 <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	e006      	b.n	8002360 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8002352:	231a      	movs	r3, #26
 8002354:	2218      	movs	r2, #24
 8002356:	4694      	mov	ip, r2
 8002358:	44bc      	add	ip, r7
 800235a:	4463      	add	r3, ip
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2200      	movs	r2, #0
 8002364:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2200      	movs	r2, #0
 800236a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800236c:	231a      	movs	r3, #26
 800236e:	2218      	movs	r2, #24
 8002370:	4694      	mov	ip, r2
 8002372:	44bc      	add	ip, r7
 8002374:	4463      	add	r3, ip
 8002376:	781b      	ldrb	r3, [r3, #0]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b00e      	add	sp, #56	; 0x38
 800237e:	bdb0      	pop	{r4, r5, r7, pc}
 8002380:	08002724 	.word	0x08002724
 8002384:	40021000 	.word	0x40021000
 8002388:	003d0900 	.word	0x003d0900
 800238c:	00f42400 	.word	0x00f42400
 8002390:	0000ffff 	.word	0x0000ffff
 8002394:	08002748 	.word	0x08002748

08002398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a4a      	ldr	r2, [pc, #296]	; (80024dc <UART_AdvFeatureConfig+0x144>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d00b      	beq.n	80023e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a43      	ldr	r2, [pc, #268]	; (80024e0 <UART_AdvFeatureConfig+0x148>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2204      	movs	r2, #4
 80023ea:	4013      	ands	r3, r2
 80023ec:	d00b      	beq.n	8002406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a3b      	ldr	r2, [pc, #236]	; (80024e4 <UART_AdvFeatureConfig+0x14c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	2208      	movs	r2, #8
 800240c:	4013      	ands	r3, r2
 800240e:	d00b      	beq.n	8002428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <UART_AdvFeatureConfig+0x150>)
 8002418:	4013      	ands	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	2210      	movs	r2, #16
 800242e:	4013      	ands	r3, r2
 8002430:	d00b      	beq.n	800244a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a2c      	ldr	r2, [pc, #176]	; (80024ec <UART_AdvFeatureConfig+0x154>)
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	2220      	movs	r2, #32
 8002450:	4013      	ands	r3, r2
 8002452:	d00b      	beq.n	800246c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <UART_AdvFeatureConfig+0x158>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	4013      	ands	r3, r2
 8002474:	d01d      	beq.n	80024b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <UART_AdvFeatureConfig+0x15c>)
 800247e:	4013      	ands	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	035b      	lsls	r3, r3, #13
 8002496:	429a      	cmp	r2, r3
 8002498:	d10b      	bne.n	80024b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <UART_AdvFeatureConfig+0x160>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	4013      	ands	r3, r2
 80024ba:	d00b      	beq.n	80024d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <UART_AdvFeatureConfig+0x164>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]
  }
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fffdffff 	.word	0xfffdffff
 80024e0:	fffeffff 	.word	0xfffeffff
 80024e4:	fffbffff 	.word	0xfffbffff
 80024e8:	ffff7fff 	.word	0xffff7fff
 80024ec:	ffffefff 	.word	0xffffefff
 80024f0:	ffffdfff 	.word	0xffffdfff
 80024f4:	ffefffff 	.word	0xffefffff
 80024f8:	ff9fffff 	.word	0xff9fffff
 80024fc:	fff7ffff 	.word	0xfff7ffff

08002500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af02      	add	r7, sp, #8
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	2100      	movs	r1, #0
 800250e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002510:	f7fe f99e 	bl	8000850 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2208      	movs	r2, #8
 8002520:	4013      	ands	r3, r2
 8002522:	2b08      	cmp	r3, #8
 8002524:	d10d      	bne.n	8002542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	0399      	lsls	r1, r3, #14
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <UART_CheckIdleState+0x90>)
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	0013      	movs	r3, r2
 8002534:	2200      	movs	r2, #0
 8002536:	f000 f82d 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d001      	beq.n	8002542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e022      	b.n	8002588 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2204      	movs	r2, #4
 800254a:	4013      	ands	r3, r2
 800254c:	2b04      	cmp	r3, #4
 800254e:	d10d      	bne.n	800256c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	03d9      	lsls	r1, r3, #15
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <UART_CheckIdleState+0x90>)
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	0013      	movs	r3, r2
 800255e:	2200      	movs	r2, #0
 8002560:	f000 f818 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e00d      	b.n	8002588 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2274      	movs	r2, #116	; 0x74
 8002582:	2100      	movs	r1, #0
 8002584:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b004      	add	sp, #16
 800258e:	bd80      	pop	{r7, pc}
 8002590:	01ffffff 	.word	0x01ffffff

08002594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	1dfb      	adds	r3, r7, #7
 80025a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a4:	e05e      	b.n	8002664 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	3301      	adds	r3, #1
 80025aa:	d05b      	beq.n	8002664 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ac:	f7fe f950 	bl	8000850 <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d302      	bcc.n	80025c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11b      	bne.n	80025fa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	492f      	ldr	r1, [pc, #188]	; (800268c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	438a      	bics	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2274      	movs	r2, #116	; 0x74
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e044      	b.n	8002684 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2204      	movs	r2, #4
 8002602:	4013      	ands	r3, r2
 8002604:	d02e      	beq.n	8002664 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	401a      	ands	r2, r3
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	429a      	cmp	r2, r3
 8002618:	d124      	bne.n	8002664 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4917      	ldr	r1, [pc, #92]	; (800268c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	2120      	movs	r1, #32
 8002656:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2274      	movs	r2, #116	; 0x74
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e00f      	b.n	8002684 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	4013      	ands	r3, r2
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	425a      	negs	r2, r3
 8002674:	4153      	adcs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	001a      	movs	r2, r3
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d091      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b004      	add	sp, #16
 800268a:	bd80      	pop	{r7, pc}
 800268c:	fffffe5f 	.word	0xfffffe5f

08002690 <__libc_init_array>:
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	2600      	movs	r6, #0
 8002694:	4d0c      	ldr	r5, [pc, #48]	; (80026c8 <__libc_init_array+0x38>)
 8002696:	4c0d      	ldr	r4, [pc, #52]	; (80026cc <__libc_init_array+0x3c>)
 8002698:	1b64      	subs	r4, r4, r5
 800269a:	10a4      	asrs	r4, r4, #2
 800269c:	42a6      	cmp	r6, r4
 800269e:	d109      	bne.n	80026b4 <__libc_init_array+0x24>
 80026a0:	2600      	movs	r6, #0
 80026a2:	f000 f821 	bl	80026e8 <_init>
 80026a6:	4d0a      	ldr	r5, [pc, #40]	; (80026d0 <__libc_init_array+0x40>)
 80026a8:	4c0a      	ldr	r4, [pc, #40]	; (80026d4 <__libc_init_array+0x44>)
 80026aa:	1b64      	subs	r4, r4, r5
 80026ac:	10a4      	asrs	r4, r4, #2
 80026ae:	42a6      	cmp	r6, r4
 80026b0:	d105      	bne.n	80026be <__libc_init_array+0x2e>
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
 80026b4:	00b3      	lsls	r3, r6, #2
 80026b6:	58eb      	ldr	r3, [r5, r3]
 80026b8:	4798      	blx	r3
 80026ba:	3601      	adds	r6, #1
 80026bc:	e7ee      	b.n	800269c <__libc_init_array+0xc>
 80026be:	00b3      	lsls	r3, r6, #2
 80026c0:	58eb      	ldr	r3, [r5, r3]
 80026c2:	4798      	blx	r3
 80026c4:	3601      	adds	r6, #1
 80026c6:	e7f2      	b.n	80026ae <__libc_init_array+0x1e>
 80026c8:	08002774 	.word	0x08002774
 80026cc:	08002774 	.word	0x08002774
 80026d0:	08002774 	.word	0x08002774
 80026d4:	08002778 	.word	0x08002778

080026d8 <memset>:
 80026d8:	0003      	movs	r3, r0
 80026da:	1812      	adds	r2, r2, r0
 80026dc:	4293      	cmp	r3, r2
 80026de:	d100      	bne.n	80026e2 <memset+0xa>
 80026e0:	4770      	bx	lr
 80026e2:	7019      	strb	r1, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	e7f9      	b.n	80026dc <memset+0x4>

080026e8 <_init>:
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ee:	bc08      	pop	{r3}
 80026f0:	469e      	mov	lr, r3
 80026f2:	4770      	bx	lr

080026f4 <_fini>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr
